% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/is.operator.R
\name{is.operator}
\alias{is.operator}
\title{Utilities for operators}
\usage{
is.operator(x, ...)
}
\arguments{
\item{x}{object to be tested or coerced. Can be \code{function} or
\code{name}.}

\item{\dots}{additional arguments passed to \code{\link{operators}}.}
}
\value{
\code{is.operator} and \code{can.operator} return logical.

\code{as.operator} returns the argument coerced to the concommitant R
function.
}
\description{
These S4 Methods are utilies for working with operators. In R, operators are
functions with special syntax.
}
\details{
\code{is.operator} tests whether the object is one of the defined
\code{\link{operators}}.

\code{can.operator} tests whether the object can be coerced to an operator.

\code{as.operator} coerced the object to an operator.

Optionally, you can specify one of the that it tests for a specific type of
operator.  See details, below.

An operator is R function with special syntax.

( See \code{??operator} for examples of each. )

\code{is.operator} tests whether the argumenst is an operator.

\code{as.operator} coerces \code{x} to a operator, otherwise fails.

\code{can.operator} test whether the object can be coerced to an operator.

All functions can accepts a \code{types} argument which is passed to
\code{link{operators}}.  By specifying one or more types, these functions
test using those \code{types} only.

New operators can be "registered" using \code{\link{setOperator}}.
}
\examples{
 

 \dontrun{
   is.operator( `+` )
   is.operator( 'xyzzy' )
   is.operator( `+`, types="arithmetic" )
   is.operator( `+`, types="relational" )

   can.operator( `+` )
   can.operator( 'xyzzy' )
   can.operator( `+`, types="arithmetic" )
   can.operator( `+`, types="relational" )

   as.operator( `+` )
   as.operator( '+' )
   as.operator( as.name('+') )  
 }

}
\seealso{
\code{\link{operators}}, \code{\link{apropos}},
\code{\link{match.fun}}
}
\author{
Christopher Brown
}
\keyword{manip}
\keyword{utilities}
